@page "/reports"
@inject TransactionService TransactionService
@inject CsvExportService CsvExportService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using AppFinancia.Services;
@using AppFinancia.Models;
<h3>Relatórios</h3>

<!-- Cards de Resumo Geral -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card text-white bg-info">
            <div class="card-header">Saldo Geral</div>
            <div class="card-body">
                <h5 class="card-title">@TotalGeral.ToString("C")</h5>
                <p class="card-text">Esse é o saldo total de todas as suas transações.</p>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card text-white bg-danger">
            <div class="card-header">Despesa Mensal</div>
            <div class="card-body">
                <h5 class="card-title">@DespesaMensal.ToString("C")</h5>
                <p class="card-text">Esse é o total de despesas do mês atual.</p>
            </div>
        </div>
    </div>
</div>

<!-- Filtros de Data -->
<div class="mb-3">
    <label for="startDate" class="form-label">Data Inicial</label>
    <InputDate id="startDate" class="form-control" @bind-Value="startDate" />
</div>

<div class="mb-3">
    <label for="endDate" class="form-label">Data Final</label>
    <InputDate id="endDate" class="form-control" @bind-Value="endDate" />
</div>

<button class="btn btn-primary btn-sm" @onclick="GenerateReport">Gerar Relatório</button>
<button class="btn btn-success btn-sm" @onclick="ExportTransactionsToCsv">Exportar para CSV</button>
<button class="btn btn-danger btn-sm" @onclick="ExportToPdf">Exportar para PDF</button>


<!-- Resumo do Relatório -->
@if (filteredTransactions.Any())
{
    <h4 class="mt-4">Resumo</h4>
    <div class="alert alert-info">
        <p><strong>Total Despesas:</strong> @TotalDespesas.ToString("C")</p>
        <p><strong>Total Receitas:</strong> @TotalReceitas.ToString("C")</p>
        <p><strong>Total Restante:</strong> @TotalRestante.ToString("C")</p>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Descrição</th>
                <th>Valor</th>
                <th>Categoria</th>
                <th>Tipo</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in filteredTransactions)
            {
                <tr style="@(transaction.IsExpense ? "color: red;" : "color: green;")">
                    <td>@transaction.Description</td>
                    <td>@transaction.Amount.ToString("C")</td>
                    <td>@transaction.Category</td>
                    <td>@(transaction.IsExpense ? "Despesa" : "Receita")</td>
                    <td>@transaction.Date.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="mt-3">Nenhuma transação encontrada para o período selecionado.</p>
}

@code {
    private DateTime startDate = DateTime.Today.AddMonths(-1);
    private DateTime endDate = DateTime.Today;
    private List<Transaction> filteredTransactions = new List<Transaction>();

    // Saldo geral (total de receitas menos total de despesas)
    private decimal TotalGeral => _transactions.Where(t => !t.IsExpense).Sum(t => t.Amount) - _transactions.Where(t => t.IsExpense).Sum(t => t.Amount);

    // Despesa do mês atual
    private decimal DespesaMensal => _transactions.Where(t => t.IsExpense && t.Date.Month == DateTime.Today.Month && t.Date.Year == DateTime.Today.Year).Sum(t => t.Amount);

    private decimal TotalDespesas => filteredTransactions.Where(t => t.IsExpense).Sum(t => t.Amount);
    private decimal TotalReceitas => filteredTransactions.Where(t => !t.IsExpense).Sum(t => t.Amount);
    private decimal TotalRestante => TotalReceitas - TotalDespesas;

    private List<Transaction> _transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        _transactions = await TransactionService.GetTransactionsAsync();
    }

    private async Task GenerateReport()
    {
        filteredTransactions = _transactions.Where(t => t.Date >= startDate && t.Date <= endDate).ToList();
    }


    // Metodo Exporta Cvs
     private async Task ExportTransactionsToCsv()
    {
        var transactions = await TransactionService.GetTransactionsAsync();
        await CsvExportService.ExportTransactionsToCsvAsync(transactions);
    }

// Exportaçao PDF
     private async Task ExportToPdf()
    {
        // Converter as transações para um formato que o JavaScript entenda
        var transactionsForJs = _transactions.Select(t => new
        {
            description = t.Description,
            amount = t.Amount,
            category = t.Category.ToString(),
            date = t.Date
        });

        // Chamar o método JS para exportar o PDF com os cabeçalhos fixos
        await JSRuntime.InvokeVoidAsync("jsPDFGenerator.generatePDF", transactionsForJs);
    }
}
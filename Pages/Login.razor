@page "/login"
@inject IJSRuntime JS
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<div class="login-page">
    <div class="content-wrapper text-center">
        <img src="logo_512.png" alt="Logo do Aplicativo" class="app-logo" />
        <h2 class="app-title">Login</h2>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLoginSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" @oninput="HandleEmailInput" />
            </div>

            <button type="submit" class="btn btn-primary btn-lg">Entrar</button>
        </EditForm>
    </div>
</div>

<style>
    .mb-3 {
        width: 300px;
    }
    .login-page {
        background-color: #e0f7e9;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;
        color: #333;
    }
    .app-logo {
        width: 150px;
        height: auto;
        margin-bottom: 20px;
    }
    .app-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 20px;
        color: #2c3e50;
    }
    button.btn-primary {
        background-color: #007bff;
        border: none;
        padding: 10px 25px;
        font-size: 1.1rem;
        font-weight: bold;
        border-radius: 25px;
        transition: background-color 0.3s ease-in-out;
    }
    button.btn-primary:hover {
        background-color: #0056b3;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLoginSubmit()
    {
        // Converte o email para minúsculo antes de qualquer operação
        loginModel.Email = loginModel.Email?.ToLowerInvariant();

        // Verifica se o usuário está registrado no Firebase
        var isRegistered = await JS.InvokeAsync<bool>("checkIfUserExists", loginModel.Email);

        if (isRegistered)
        {
            // Armazena o e-mail no LocalStorage
            await JS.InvokeVoidAsync("localStorage.setItem", "userEmail", loginModel.Email);

            // Redireciona para a página principal
            Navigation.NavigateTo("home");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Usuário não encontrado. Por favor, cadastre-se.");
            Navigation.NavigateTo("register");
        }
    }

    private void HandleEmailInput(ChangeEventArgs e)
    {
        // Converte o email para minúsculo ao digitar
        loginModel.Email = e.Value?.ToString()?.ToLowerInvariant();
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Por favor, insira seu e-mail")]
        [EmailAddress(ErrorMessage = "Formato de e-mail inválido")]
        public string Email { get; set; }
    }
}
